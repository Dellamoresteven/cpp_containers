
template <typename K, typename V>
class myHashMap {
    private:
    int * container;
    unsigned int num_buckets;

    unsigned long hashFunc(const K &key) {
        //auto _hash =  reinterpret_cast<unsigned long>(key) % num_buckets;
        //return _hash;
        return key;
    }

    public:
    myHashMap(unsigned int num_buckets) : container(new int[num_buckets]), num_buckets(num_buckets) {}

    ~myHashMap() {
        delete[] container;
    }

    void add(K key, V value) {
        container[hashFunc(key)] = value;
    }

    void remove() {

    }

    void print() {
    for (int i = 0; i < BUCKET; i++) {
        printf("%d", i)
        for (auto x : table[i])
            printf(" -> %d\n", x)
    }
    }

};
